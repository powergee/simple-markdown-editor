{"version":3,"sources":["MarkdownViewer.js","MarkdownEditor.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["MarkdownViewer","props","newProps","escapeHtml","plugins","RemarkMathPlugin","renderers","math","value","inlineMath","useStyles","makeStyles","input","height","alignItems","MarkdownEditor","useState","undefined","source","setSource","classes","useEffect","contents","Paper","component","className","Grid","container","direction","FormControl","variant","InputLabel","htmlFor","FilledInput","root","inputProps","multiline","rows","rowsMax","onChange","event","target","Divider","orientation","flexItem","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"0TA4BeA,G,OApBQ,SAAAC,GACnB,IAAMC,EAAQ,eACPD,EADO,CAEVE,YAAY,EACZC,QAAS,CACLC,KAGJC,UAAU,eACHL,EAAMK,UADJ,CAELC,KAAM,gBAAEC,EAAF,EAAEA,MAAF,OAAa,kBAAC,YAAD,KAAYA,IAC/BC,WAAY,gBAAED,EAAF,EAAEA,MAAF,OAAa,kBAAC,aAAD,KAAaA,QAI9C,OACI,kBAAC,IAAkBN,K,SCnBrBQ,EAAYC,YAAW,CACzBC,MAAO,CACHC,OAAQ,OACRC,WAAY,gBAyCLC,EArCQ,SAACd,GAAW,IAAD,EACFe,wBAASC,GADP,mBACvBC,EADuB,KACfC,EADe,KAExBC,EAAUV,IAUhB,OARAW,qBAAU,WACNF,OAA6BF,IAAnBhB,EAAMqB,SAAyB,GAAKrB,EAAMqB,YACrD,CAACrB,EAAMqB,WAON,kBAACC,EAAA,EAAD,CAAOC,UAAU,OAAOC,UAAU,eAC9B,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,OACtB,kBAACC,EAAA,EAAD,CAAaC,QAAQ,SAASL,UAAU,qBACpC,kBAACM,EAAA,EAAD,CAAYC,QAAQ,oBAApB,oBACA,kBAACC,EAAA,EAAD,CACIR,UAAU,eACVL,QAAS,CACLc,KAAMd,EAAQR,OAElBuB,WAAY,CAAE,aAAc,mBAAoB,mBAAelB,GAC/DmB,WAAS,EACTC,KAAM,EACNC,QAAS,IACT9B,MAAOU,EACPqB,SAnBpB,SAA0BC,GACtBrB,EAAUqB,EAAMC,OAAOjC,WAqBf,kBAACkC,EAAA,EAAD,CAASjB,UAAU,iBAAiBkB,YAAY,WAAWC,UAAQ,IACnE,kBAAC,EAAD,CAAgBnB,UAAU,gBAAgBP,OAAQA,OCYnD2B,MAjDf,WA0CE,OACE,kBAACnB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASH,UAAU,YAC3C,kBAAC,EAAD,CAAgBA,UAAU,SAASH,SA3C5B,krJCKOwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.00cba71e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactMarkdown from 'react-markdown';\nimport RemarkMathPlugin from 'remark-math';\nimport { BlockMath, InlineMath } from 'react-katex';\nimport 'katex/dist/katex.min.css';\n\n\nconst MarkdownViewer = props => {\n    const newProps = {\n        ...props,\n        escapeHtml: false,\n        plugins: [\n            RemarkMathPlugin\n        ],\n\n        renderers: {\n            ...props.renderers,\n            math: ({value}) => <BlockMath>{value}</BlockMath>,\n            inlineMath: ({value}) => <InlineMath>{value}</InlineMath>\n        }\n    };\n\n    return (\n        <ReactMarkdown {...newProps}></ReactMarkdown>\n    );\n};\n\nexport default MarkdownViewer;","import React, { useEffect, useState } from 'react';\nimport { Paper, Grid, FormControl, InputLabel, Divider, TextField, FilledInput } from '@material-ui/core';\nimport MarkdownViewer from './MarkdownViewer';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    input: {\n        height: '100%',\n        alignItems: 'flex-start'\n    }\n})\n\nconst MarkdownEditor = (props) => {\n    const [source, setSource] = useState(undefined);\n    const classes = useStyles();\n\n    useEffect(() => {\n        setSource(props.contents === undefined ? \"\" : props.contents);\n    }, [props.contents]);\n\n    function handleTextChange(event) {\n        setSource(event.target.value);\n    }\n\n    return (\n        <Paper component=\"form\" className=\"editor_root\">\n            <Grid container direction=\"row\">\n                <FormControl variant=\"filled\" className=\"editor_input_form\">\n                    <InputLabel htmlFor=\"component-filled\">Markdown / LaTeX</InputLabel>\n                    <FilledInput\n                        className=\"editor_input\"\n                        classes={{\n                            root: classes.input\n                        }}\n                        inputProps={{ 'aria-label': 'Markdown / LaTeX', 'align-items': undefined }}\n                        multiline\n                        rows={1}\n                        rowsMax={10000}\n                        value={source}\n                        onChange={handleTextChange}\n                    ></FilledInput>\n                </FormControl>\n                <Divider className=\"editor_divider\" orientation=\"vertical\" flexItem></Divider>\n                <MarkdownViewer className=\"editor_viewer\" source={source} />\n            </Grid>\n        </Paper>\n    );\n};\n\nexport default MarkdownEditor;","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport logo from './logo.svg';\nimport './App.css';\nimport MarkdownEditor from './MarkdownEditor';\n\nfunction App() {\n  let content = \n`# 샘플 문제 지문\n\nProve that a union of any two countably infinite sets is countably infinite.\n\n# 샘플 풀이 예시\n\ncountably infinite한 두 집합을 $A$, $B$라고 하자. 이제 아래 과정을 따라 명제를 증명한다.\n\n## $A \\\\cap B = \\\\varnothing$일 때,\n\n  집합 $A$와 $B$가 countably infinite하기 때문에 두개의 전단사 함수 $f:A\\\\rightarrow N$와 $g: B \\\\rightarrow N$가 존재한다. 이 때 함수 $h: A\\\\cup B \\\\rightarrow N$를 아래와 같이 정의하자.\n\n  $$\n  h(x)=  \\\\begin{cases}\n            2f(x) & {(x \\\\in A)} \\\\\\\\\n            2g(x)+1 & {(x \\\\in B)} \\\\\\\\\n        \\\\end{cases}\n  $$\n\n  이제 임의의 두 원소 $c, d \\\\in A \\\\cup B$에 대하여 $h(c)=h(d)$라고 가정하자. 그렇다면 아래와 같은 방법으로 함수 $h$가 one-to-one 함수라는 것을 증명할 수 있다.\n\n  $c \\\\in A$이고, $d \\\\in A$일 때, $h(c)=h(d)$에 식을  대입하면 $2f(c)=2f(d)$와 같다. 이 등식에서 양변을 2로 나누면 $f(c)=f(d)$가 된다. $f$가 전단사 함수이므로 $c=d$이다.\n\n  $c \\\\in A$이고, $d \\\\in B$인 경우는 존재하지 않는다. 그 이유는, $h(c)=h(d)$에 식을  대입하면 $2f(c)=2g(d)+1$가 되는데, 양변에 $2g(d)$를 빼고 양변을 2로 나누면 $f(c)-g(d)=\\\\frac{1}{2}$를 얻을 수 있다. 그런데 $f, g$가 정수 집합을 공역으로 가지므로 이런 경우는 있을 수 없다.\n\n  $c \\\\in B$이고, $d \\\\in B$일 때, $h(c)=h(d)$에 식을  대입하면 $2g(c)+1=2g(d)+1$와 같다. 이 등식에서 양변에 1을 빼고 양변을 2로 나누면 $g(c)=g(d)$가 된다. $g$가 전단사 함수이므로 $c=d$이다.\n\n  $c \\\\in B$이고, $d \\\\in A$인 경우는 존재하지 않는다. 그 이유는, $h(c)=h(d)$에 식을  대입하면 $2g(c)+1=2f(d)$가 되는데, 양변에 $2g(c)$를 빼고 양변을 2로 나누면 $\\\\frac{1}{2}=f(d)-g(c)$를 얻을 수 있다. 그런데 $f, g$가 정수 집합을 공역으로 가지므로 이런 경우는 있을 수 없다.\n\n  이렇게 임의의 두 원소 $c, d \\\\in A \\\\cup B$에 대하여 $h(c)=h(d)$라고 가정하면 항상 $c=d$가 성립하므로 h는 one-to-one 함수이다. 따라서 $A\\\\cup B$는 countably infinite하다.\n\n## $A \\\\cap B \\\\not= \\\\varnothing$일 때,\n\n  이런 경우 $A \\\\cup B = (A-B) \\\\cup (A \\\\cap B) \\\\cup (B-A)$로 분리해서 생각하면 3개의 집합은 모두 disjoint하다. 이것들이 모두 무한 집합이라면 이전에 1번에서 증명한 내용을 두 번 적용하여 $A\\\\cup B$이 countably infinite하다는 것을 쉽게 합리화할 수 있다. 그리고 하나 이상이 유한 집합인 경우에는 countably infinite한 집합과 countably하지만 not infinite 한 집합을 합집합하면 countable의 정의에 의해 자명하게 countably infinite한 집합을 얻을 수 있으므로 이들을 고려하지 않고 무한한 집합만 생각하여 1번 증명을 적용하면 증명할 수 있다.\n\n# 이미지 삽입 테스트\n\n![screensh](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png)\n`;\n\n  return (\n    <Grid container direction=\"column\" className=\"app_root\">\n      <MarkdownEditor className=\"editor\" contents={content}></MarkdownEditor>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}