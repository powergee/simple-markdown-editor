{"version":3,"sources":["MarkdownViewer.js","MarkdownEditor.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["MarkdownViewer","props","newProps","escapeHtml","plugins","RemarkMathPlugin","renderers","text","value","replace","name","emoji","getUnicode","break","paragraph","className","children","emphasis","link","href","linkReference","strong","delete","list","start","listItem","blockquote","code","table","tableCell","style","textAlign","align","padding","isHeader","background","inlineCode","math","inlineMath","MarkDownWithLaTeXRules","latexRules","LatexHighlightRules","window","ace","acequire","getRules","$rules","push","token","regex","next","embedRules","MarkdownHighlightRules","CustomMarkdownMode","HighlightRules","Mode","MarkdownEditor","useState","undefined","source","setSource","timer","setTimer","editorDivRef","useRef","editorRef","viewerRef","updateSource","current","session","editor","getSession","getValue","clearInterval","useEffect","customMarkDown","setMode","console","log","height","offsetHeight","setInterval","contents","setValue","Paper","component","Grid","container","direction","justify","Typography","variant","Divider","orientation","ref","mode","theme","fontSize","showPrintMargin","minLines","maxLines","showGutter","highlightActiveLine","wrapEnabled","onChange","flexItem","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.2c168aa7.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactMarkdown from 'react-markdown';\nimport RemarkMathPlugin from 'remark-math';\nimport { BlockMath, InlineMath } from 'react-katex';\nimport 'katex/dist/katex.min.css';\nimport emoji from 'emoji-dictionary';\n\nconst MarkdownViewer = props => {\n    const newProps = {\n        escapeHtml: false,\n        plugins: [\n            RemarkMathPlugin\n        ],\n\n        renderers: {\n            text: (props) => props.value.replace(/:[^:\\s]*(?:::[^:\\s]*)*:/gi, name => emoji.getUnicode(name)),\n            break: (props) => <br></br>,\n            paragraph: (props) => <p className=\"markdown_paragraph\">{props.children}</p>,\n            emphasis: (props) => <em className=\"markdown_emphasis\">{props.children}</em>,\n            link: (props) => <a className=\"markdown_link\" href={props.href}>{props.children}</a>,\n            linkReference: (props) => <a className=\"markdown_link\" href={props.href}>{props.children}</a>,\n            strong: (props) => <strong className=\"markdown_strong\">{props.children}</strong>,\n            delete: (props) => <del>{props.children}</del>,\n            list: (props) => props.start ? <ol className=\"markdown_ol\">{props.children}</ol> : <ul className=\"markdown_ul\">{props.children}</ul>,\n            listItem: (props) => <li className=\"markdown_list_item\">{props.children}</li>,\n            blockquote: (props) => (\n                <blockquote className=\"markdown_blockquote\">\n                    {props.children}\n                </blockquote>),\n            code: (props) => (\n                <pre className=\"markdown_pre\">\n                    <code>\n                        {props.value}\n                    </code>\n                </pre>),\n            table: (props) => (\n                <table className=\"markdown_table\">{props.children}</table>\n            ),\n            tableCell: (props) => {\n                let style = {\n                    textAlign: props.align ? props.align : 'center',\n                    padding: \"6px 13px\"\n                };\n\n                style.border = '1px solid #dfe2e5';\n                if (props.isHeader) {\n                    style.background = '#f2f2f2'   \n                }\n\n                return <td style={style}>{props.children}</td>\n            },\n            inlineCode: (props) => <code className=\"markdown_inline_code\">{props.value}</code>,\n            math: (props) => <BlockMath>{props.value}</BlockMath>,\n            inlineMath: (props) => <InlineMath>{props.value}</InlineMath>\n        }\n    };\n\n    return (\n        <ReactMarkdown className=\"markdown_viewer\" {...props} {...newProps}></ReactMarkdown>\n    );\n};\n\nexport default MarkdownViewer;","import React, { useEffect, useState, useRef, createRef, useReducer } from 'react';\nimport { Paper, Grid, Typography, Divider, TextField, FilledInput } from '@material-ui/core';\nimport MarkdownViewer from './MarkdownViewer';\nimport AceEditor from 'react-ace';\n\nimport \"ace-builds/src-noconflict/mode-markdown\";\nimport \"ace-builds/src-noconflict/mode-latex\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\n\nclass MarkDownWithLaTeXRules\n    extends window.ace.acequire(\"ace/mode/markdown_highlight_rules\").MarkdownHighlightRules {\n    constructor() {\n        super();\n        //console.log(this.$rules)\n        let LatexHighlightRules = window.ace.acequire(\"ace/mode/latex_highlight_rules\").LatexHighlightRules;\n        let latexRules = (new LatexHighlightRules()).getRules();\n        //console.log(latexRules);\n\n        this.$rules.start.push({\n            token: \"keyword\",\n            regex: \"\\\\$\\\\$\",\n            next: \"latex-start\"\n        });\n        this.$rules.start.push({\n            token: \"keyword\",\n            regex: \"\\\\$\",\n            next: \"latex-start\"\n        });\n        \n        this.embedRules(latexRules, \"latex-\", [\n            {\n                token: \"keyword\",\n                regex: \"\\\\$\\\\$\",\n                next: \"start\"\n            },\n            {\n                token: \"keyword\",\n                regex: \"\\\\$\",\n                next: \"start\"\n            }\n        ]);\n\n    }\n}\n\nclass CustomMarkdownMode\n    extends window.ace.acequire(\"ace/mode/markdown\").Mode {\n    constructor() {\n        super();\n        this.HighlightRules = MarkDownWithLaTeXRules;\n    }\n}\n\nconst MarkdownEditor = (props) => {\n    const [source, setSource] = useState(undefined);\n    const [timer, setTimer] = useState(undefined);\n    const editorDivRef = useRef();\n    const editorRef = useRef();\n    const viewerRef = useRef();\n\n    function updateSource() {\n        if (editorRef.current) {\n            let session = editorRef.current.editor.getSession();\n            setSource(session.getValue());\n        } else clearInterval(timer);\n    }\n\n    useEffect(() => {\n        const customMarkDown = new CustomMarkdownMode();\n        let session = editorRef.current.editor.getSession();\n        session.setMode(customMarkDown);\n        console.log(viewerRef.current.style);\n        viewerRef.current.style.height = `${editorDivRef.current.offsetHeight}px`;\n        setTimer(setInterval(updateSource, 250));\n    }, []);\n\n    useEffect(() => {\n        setSource(props.contents === undefined ? \"\" : props.contents);\n        let session = editorRef.current.editor.getSession();\n        session.setValue(props.contents === undefined ? \"\" : props.contents);\n    }, [props.contents]);\n\n    function handleTextChange(value) {\n        if (props.onChange)\n            props.onChange(value);\n    }\n\n    return (\n        <Paper component=\"form\" className=\"editor_root\">\n            <Grid container direction=\"row\" justify=\"center\">\n                <div className=\"editor_input_container\">\n                    <Typography variant=\"caption\">Markdown 및 LaTeX 형식</Typography>\n                    <Divider className=\"editor_caption_divider\" orientation=\"horizontal\"></Divider>\n                    <div className=\"editor_input\" ref={editorDivRef}>\n                        <AceEditor\n                            ref={editorRef}\n                            className=\"editor_input\"\n                            mode=\"markdown\"\n                            theme=\"textmate\"\n                            fontSize={18}\n                            showPrintMargin={false}\n                            minLines={35}\n                            maxLines={35}\n                            showGutter={true}\n                            highlightActiveLine={true}\n                            wrapEnabled={true}\n                            onChange={handleTextChange}\n                        ></AceEditor>\n                    </div>\n                </div>\n                <Divider className=\"editor_divider\" orientation=\"vertical\" flexItem></Divider>\n                <div className=\"editor_viewer_container\">\n                    <Typography variant=\"caption\">미리 보기</Typography>\n                    <Divider className=\"editor_caption_divider\" orientation=\"horizontal\"></Divider>\n                    <div ref={viewerRef} className=\"editor_viewer\">\n                        <MarkdownViewer source={source}/>\n                    </div>\n                </div>\n            </Grid>\n        </Paper>\n    );\n};\n\nexport default MarkdownEditor;","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport logo from './logo.svg';\nimport './App.css';\nimport MarkdownEditor from './MarkdownEditor';\nimport emoji from 'emoji-dictionary';\n\nfunction App() {\n  let content = \n`\n# 0. Emoji 테스트\n\n[여기에](https://gist.github.com/rxaviers/7360908) 나열된 Emoji를 사용할 수 있습니다.\n\n# :smile: :sunglasses: :+1:\n\n# 1. LaTeX 테스트\n\nLaTeX 문법으로 입력한 수식이 Markdown 요소와 잘 섞여 출력됩니다.\n\n### 예시 문제\n\n**Review the following textbox.**\n***\nFunction $G:Z^+ \\\\rightarrow Z$ is defined by the rule\n\n$$\n  G(n)=\\\\begin{cases}\n      1 & \\\\text{if } n=1 \\\\\\\\\n      G(\\\\frac{n}{2}) & \\\\text{if }n\\\\text{ is even} \\\\\\\\\n      2+G(3n-5) & \\\\text{if }n\\\\text{ is odd and }n>1 \\\\\\\\\n  \\\\end{cases}\n$$\n\nfor each integer $n \\\\geq 1$.\n***\n\n**Is the function G is well defined? Justify your answer.**\n\n### 예시 답안\n\n함수가 잘 정의되지 않았다는 반례를 들 수 있다. $n=5$라고 하자. 그렇다면 $G(n)$은 아래와 같이 전개된다.\n\n$$\n\\\\begin{aligned}\n    G(5) =& 2+G(3 \\\\cdot 5 - 5) & \\\\text{(5는 1보다 큰 홀수이므로 3번째 경우에 대입)} \\\\\\\\\n    =& 2+G(10) & \\\\text{(대수적 계산에 의함)} \\\\\\\\\n    =& 2+G(5) & \\\\text{(10은 짝수이므로 2번째 경우에 대입)} \\\\\\\\\n\\\\end{aligned}\n$$\n\n결과적으로 $G(5)=2+G(5)$라는 결과가 도출되므로 $G(5)$를 정의할 수 없다. 따라서 함수 $G$는 잘 정의되지 않았다. (not well-defined)\n\n# 2. 헤더 테스트\n\n아래와 같은 6가지 해더를 사용할 수 있습니다.\n\n# This is a H1\n## This is a H2\n### This is a H3\n#### This is a H4\n##### This is a H5\n###### This is a H6\n\n# 3. BlockQuote 테스트\n\n\\`\\`\\`>\\`\\`\\` 문자를 이용하여 인용문을 작성할 수 있습니다.\n\n> This is a first blockqute.\n>> This is a second blockqute.\n>>> This is a third blockqute.\n\n> ### This is a H3\n> * List\n>>\\`\\`\\`\n>>code\n>>\\`\\`\\`\n\n# 4. 목록 테스트\n\n아래와 같이 숫자로 시작하는 목록과 점으로 시작하는 목록을 작성할 수 있습니다.\n\n1. 첫번째\n2. 두번째\n3. 세번째\n\n* 빨강\n  * 녹색\n    * 파랑\n\n+ 빨강\n  + 녹색\n    + 파랑\n\n- 빨강\n  - 녹색\n    - 파랑\n\n* 1단계\n  - 2단계\n    + 3단계\n      + 4단계\n\n# 5. 코드 테스트\n\n아래와 같이 코드 블럭을 사용할 수 있습니다.\n\nThis is a normal paragraph:\n\n    This is a code block.\n\nend code block.\n\n\\`\\`\\`\npublic class BootSpringBootApplication {\n  public static void main(String[] args) {\n    System.out.println(\"Hello, Honeymon\");\n  }\n}\n\\`\\`\\`\n\n# 6. 수평선 테스트\n\n아래와 같이 수평선을 사용할 수 있습니다.\n\n* * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------\n\n# 7. 링크 테스트\n\n아래와 같이 링크를 생성할 수 있습니다.\n\nLink: [Google][googlelink]\n\n[googlelink]: https://google.com \"Go google\"\n\n# 8. 강조 테스트\n\n아래와 같이 강조할 수 있습니다.\n\n* *single asterisks*\n* _single underscores_\n* **double asterisks**\n* __double underscores__\n* ~~cancelline~~\n\n# 9. 이미지 삽입 테스트\n\n아직 이미지 서버를 지원하지는 않으나, 아래와 같은 방법으로 이미지 서버에 있는 이미지를 가져올 수 있습니다.\n\n![screensh](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png)\n\n# 10. 표 테스트\n\n아래와 같이 표를 작성할 수 있습니다.\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n| Option | Description |\n| ------:| -----------:|\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n`;\n\n  return (\n    <Grid container direction=\"column\" className=\"app_root\">\n      <MarkdownEditor className=\"editor\" contents={content}></MarkdownEditor>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}