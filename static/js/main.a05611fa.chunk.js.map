{"version":3,"sources":["MarkdownViewer.js","MarkdownEditor.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["MarkdownViewer","props","newProps","escapeHtml","plugins","RemarkMathPlugin","renderers","code","style","background","padding","value","tableCell","textAlign","align","isHeader","children","inlineCode","math","inlineMath","MarkDownWithLaTeXRules","latexRules","LatexHighlightRules","window","ace","acequire","getRules","$rules","start","push","token","regex","next","embedRules","MarkdownHighlightRules","CustomMarkdownMode","HighlightRules","Mode","MarkdownEditor","useState","undefined","source","setSource","editorRef","useRef","viewerRef","updateSource","session","current","editor","getSession","getValue","useEffect","customMarkDown","setMode","setInterval","contents","setValue","Paper","component","className","Grid","container","direction","justify","Typography","variant","Divider","orientation","ref","mode","theme","fontSize","showPrintMargin","minLines","maxLines","showGutter","highlightActiveLine","wrapEnabled","flexItem","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.a05611fa.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactMarkdown from 'react-markdown';\nimport RemarkMathPlugin from 'remark-math';\nimport { BlockMath, InlineMath } from 'react-katex';\nimport 'katex/dist/katex.min.css';\n\nconst MarkdownViewer = props => {\n    const newProps = {\n        escapeHtml: false,\n        plugins: [\n            RemarkMathPlugin\n        ],\n\n        renderers: {\n            code: (props) => {\n                return (\n                    <pre style={{ background: '#ebebeb', padding: 5 }}>\n                        <code>\n                            {props.value}\n                        </code>\n                    </pre>);\n            },\n            tableCell: (props) => {\n                let style = {\n                    textAlign: props.align ? props.align : 'center',\n                    padding: 5\n                };\n\n                style.border = '1px solid #b5b5b5';\n                if (props.isHeader) {\n                    style.background = '#f2f2f2'   \n                }\n\n                return <td style={style}>{props.children}</td>\n            },\n            inlineCode: (props) => <code style={{ background: '#ebebeb' }}>{props.value}</code>,\n            math: (props) => <BlockMath>{props.value}</BlockMath>,\n            inlineMath: (props) => <InlineMath>{props.value}</InlineMath>\n        }\n    };\n\n    return (\n        <ReactMarkdown {...props} {...newProps}></ReactMarkdown>\n    );\n};\n\nexport default MarkdownViewer;","import React, { useEffect, useState, useRef, createRef, useReducer } from 'react';\nimport { Paper, Grid, Typography, Divider, TextField, FilledInput } from '@material-ui/core';\nimport MarkdownViewer from './MarkdownViewer';\nimport AceEditor from 'react-ace';\n\nimport \"ace-builds/src-noconflict/mode-markdown\";\nimport \"ace-builds/src-noconflict/mode-latex\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\n\nclass MarkDownWithLaTeXRules\n    extends window.ace.acequire(\"ace/mode/markdown_highlight_rules\").MarkdownHighlightRules {\n    constructor() {\n        super();\n        //console.log(this.$rules)\n        let LatexHighlightRules = window.ace.acequire(\"ace/mode/latex_highlight_rules\").LatexHighlightRules;\n        let latexRules = (new LatexHighlightRules()).getRules();\n        //console.log(latexRules);\n\n        this.$rules.start.push({\n            token: \"keyword\",\n            regex: \"\\\\$\\\\$\",\n            next: \"latex-start\"\n        });\n        this.$rules.start.push({\n            token: \"keyword\",\n            regex: \"\\\\$\",\n            next: \"latex-start\"\n        });\n        \n        this.embedRules(latexRules, \"latex-\", [\n            {\n                token: \"keyword\",\n                regex: \"\\\\$\\\\$\",\n                next: \"start\"\n            },\n            {\n                token: \"keyword\",\n                regex: \"\\\\$\",\n                next: \"start\"\n            }\n        ]);\n\n    }\n}\n\nclass CustomMarkdownMode\n    extends window.ace.acequire(\"ace/mode/markdown\").Mode {\n    constructor() {\n        super();\n        this.HighlightRules = MarkDownWithLaTeXRules;\n    }\n}\n\nconst MarkdownEditor = (props) => {\n    const [source, setSource] = useState(undefined);\n    const editorRef = useRef();\n    const viewerRef = useRef();\n\n    function updateSource() {\n        let session = editorRef.current.editor.getSession();\n        setSource(session.getValue());\n    }\n\n    useEffect(() => {\n        const customMarkDown = new CustomMarkdownMode();\n        let session = editorRef.current.editor.getSession();\n        session.setMode(customMarkDown);\n        setInterval(updateSource, 250);\n    }, []);\n\n    useEffect(() => {\n        setSource(props.contents === undefined ? \"\" : props.contents);\n        let session = editorRef.current.editor.getSession();\n        session.setValue(props.contents);\n    }, [props.contents]);\n\n    return (\n        <Paper component=\"form\" className=\"editor_root\">\n            <Grid container direction=\"row\" justify=\"center\">\n                <div className=\"editor_input_container\">\n                    <Typography variant=\"caption\">Markdown 및 LaTeX 형식</Typography>\n                    <Divider className=\"editor_caption_divider\" orientation=\"horizontal\"></Divider>\n                    <div className=\"editor_input\">\n                        <AceEditor\n                            ref={editorRef}\n                            className=\"editor_input\"\n                            mode=\"markdown\"\n                            theme=\"textmate\"\n                            fontSize={14}\n                            showPrintMargin={false}\n                            minLines={40}\n                            maxLines={40}\n                            showGutter={true}\n                            highlightActiveLine={true}\n                            wrapEnabled={true}\n                        ></AceEditor>\n                    </div>\n                </div>\n                <Divider className=\"editor_divider\" orientation=\"vertical\" flexItem></Divider>\n                <div className=\"editor_viewer_container\">\n                    <Typography variant=\"caption\">미리 보기</Typography>\n                    <Divider className=\"editor_caption_divider\" orientation=\"horizontal\"></Divider>\n                    <div ref={viewerRef} className=\"editor_viewer\">\n                        <MarkdownViewer source={source}/>\n                    </div>\n                </div>\n            </Grid>\n        </Paper>\n    );\n};\n\nexport default MarkdownEditor;","import React from 'react';\nimport { Grid } from '@material-ui/core';\nimport logo from './logo.svg';\nimport './App.css';\nimport MarkdownEditor from './MarkdownEditor';\n\nfunction App() {\n  let content = \n`\n# 1. LaTeX 테스트\n\nLaTeX로 입력한 수식이 다른 요소와 잘 섞여 출력되는지 테스트합니다.\n\n**Prove that a union of any two countably infinite sets is countably infinite.**\n\ncountably infinite한 두 집합을 $A$, $B$라고 하자. 이제 아래 과정을 따라 명제를 증명한다.\n\n집합 $A$와 $B$가 countably infinite하기 때문에 두개의 전단사 함수 $f:A\\\\rightarrow N$와 $g: B \\\\rightarrow N$가 존재한다. 이 때 함수 $h: A\\\\cup B \\\\rightarrow N$를 아래와 같이 정의하자.\n\n$$\nh(x)=  \\\\begin{cases}\n          2f(x) & {(x \\\\in A)} \\\\\\\\\n          2g(x)+1 & {(x \\\\in B)} \\\\\\\\\n      \\\\end{cases}\n$$\n\n이제 임의의 두 원소 $c, d \\\\in A \\\\cup B$에 대하여 $h(c)=h(d)$라고 가정하자. 그렇다면 아래와 같은 방법으로 함수 $h$가 one-to-one 함수라는 것을 증명할 수 있다.\n\n**(중략...)**\n\n# 2. 헤더 테스트\n\n헤더가 정상적으로 출력되는지 테스트합니다.\n\n# This is a H1\n## This is a H2\n### This is a H3\n#### This is a H4\n##### This is a H5\n###### This is a H6\n\n# 3. BlockQuote 테스트\n\n\\`\\`\\`>\\`\\`\\` 문자를 이용한 인용이 정상적으로 출력되는지 테스트합니다.\n\n> This is a first blockqute.\n>> This is a second blockqute.\n>>> This is a third blockqute.\n\n> ### This is a H3\n> * List\n>> \\`\\`\\`\n>>\tcode\n>> \\`\\`\\`\n\n# 4. 목록 테스트\n\n목록이 정상적으로 출력되는지 테스트합니다.\n\n1. 첫번째\n2. 두번째\n3. 세번째\n\n* 빨강\n  * 녹색\n    * 파랑\n\n+ 빨강\n  + 녹색\n    + 파랑\n\n- 빨강\n  - 녹색\n    - 파랑\n\n* 1단계\n  - 2단계\n    + 3단계\n      + 4단계\n\n# 5. 코드 테스트\n\n코드 블럭이 정상적으로 출력되는지 테스트합니다.\n\nThis is a normal paragraph:\n\n    This is a code block.\n\nend code block.\n\n\\`\\`\\`\npublic class BootSpringBootApplication {\n  public static void main(String[] args) {\n    System.out.println(\"Hello, Honeymon\");\n  }\n}\n\\`\\`\\`\n\n# 6. 수평선 테스트\n\n수평선이 정상적으로 출력되는지 테스트합니다.\n\n* * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------\n\n# 7. 링크 테스트\n\n링크가 정상적으로 출력되는지 테스트합니다.\n\nLink: [Google][googlelink]\n\n[googlelink]: https://google.com \"Go google\"\n\n# 8. 강조 테스트\n\n강조가 정상적으로 출력되는지 테스트합니다.\n\n* *single asterisks*\n* _single underscores_\n* **double asterisks**\n* __double underscores__\n* ~~cancelline~~\n\n# 9. 이미지 삽입 테스트\n\n이미지가 정상적으로 출력되는지 테스트합니다.\n\n![screensh](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png)\n\n# 10. 표 테스트\n\n표가 정상적으로 출력되는지 테스트합니다.\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n| Option | Description |\n| ------:| -----------:|\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n`;\n\n  return (\n    <Grid container direction=\"column\" className=\"app_root\">\n      <MarkdownEditor className=\"editor\" contents={content}></MarkdownEditor>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}